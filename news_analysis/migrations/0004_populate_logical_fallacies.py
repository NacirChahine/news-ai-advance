# Generated by Django 5.0.2 on 2025-09-11 11:31

from django.db import migrations
from django.utils.text import slugify


def populate_fallacies(apps, schema_editor):
    LogicalFallacy = apps.get_model('news_analysis', 'LogicalFallacy')

    seed_data = [
        {
            'name': 'Ad Hominem',
            'description': 'Attacking the person making the argument rather than the argument itself.',
            'example': '“Don’t listen to her climate data; she never finished college.”',
        },
        {
            'name': 'Straw Man',
            'description': 'Misrepresenting an opponent’s argument to make it easier to attack.',
            'example': '“They want to reduce military spending, so they must want no defense at all.”',
        },
        {
            'name': 'False Dichotomy',
            'description': 'Presenting two options as the only possibilities when others exist.',
            'example': '“You’re either with us or against us.”',
        },
        {
            'name': 'Slippery Slope',
            'description': 'Claiming a relatively small first step will inevitably lead to a chain of related events with significant impact.',
            'example': '“If we allow this regulation, soon all business will be government-controlled.”',
        },
        {
            'name': 'Appeal to Authority',
            'description': 'Insisting a claim is true because an authority says so, without supporting evidence.',
            'example': '“A famous actor says this supplement works, so it must be effective.”',
        },
        {
            'name': 'Appeal to Emotion',
            'description': 'Manipulating emotions to win an argument rather than using valid reasoning.',
            'example': '“Think of the children—this policy must be adopted.”',
        },
        {
            'name': 'Bandwagon',
            'description': 'Arguing that a claim is true because many people believe it.',
            'example': '“Millions use this diet; it must be the best.”',
        },
        {
            'name': 'Hasty Generalization',
            'description': 'Drawing a general conclusion from a small or unrepresentative sample.',
            'example': '“I met two rude tourists from X; people from X are rude.”',
        },
        {
            'name': 'Post Hoc Ergo Propter Hoc',
            'description': 'Assuming that because one event followed another, the first caused the second.',
            'example': '“It rained after I washed the car; washing my car causes rain.”',
        },
        {
            'name': 'Circular Reasoning',
            'description': 'The conclusion is assumed in the premise; arguing in a circle.',
            'example': '“This policy is the best because it is superior.”',
        },
        {
            'name': 'Red Herring',
            'description': 'Introducing an irrelevant topic to divert attention from the original issue.',
            'example': '“Why worry about healthcare costs when we have potholes to fix?”',
        },
        {
            'name': 'Tu Quoque (Appeal to Hypocrisy)',
            'description': 'Dismissing a criticism because the critic is guilty of the same thing.',
            'example': '“You can’t argue for healthy eating—you ate cake yesterday.”',
        },
        {
            'name': 'False Equivalence',
            'description': 'Presenting two unequal things as morally or logically equivalent.',
            'example': '“Both sides made mistakes, so they’re equally at fault.”',
        },
        {
            'name': 'No True Scotsman',
            'description': 'Reinterpreting evidence to prevent refutation of one’s position.',
            'example': '“No true expert would disagree with this theory.”',
        },
    ]

    for item in seed_data:
        name = item['name']
        slug = slugify(name)
        defaults = {
            'description': item['description'],
            'example': item['example'],
            'slug': slug,
        }
        LogicalFallacy.objects.update_or_create(name=name, defaults=defaults)


def unpopulate_fallacies(apps, schema_editor):
    LogicalFallacy = apps.get_model('news_analysis', 'LogicalFallacy')
    names = [
        'Ad Hominem',
        'Straw Man',
        'False Dichotomy',
        'Slippery Slope',
        'Appeal to Authority',
        'Appeal to Emotion',
        'Bandwagon',
        'Hasty Generalization',
        'Post Hoc Ergo Propter Hoc',
        'Circular Reasoning',
        'Red Herring',
        'Tu Quoque (Appeal to Hypocrisy)',
        'False Equivalence',
        'No True Scotsman',
    ]
    LogicalFallacy.objects.filter(name__in=names).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('news_analysis', '0003_logicalfallacy_logicalfallacydetection'),
    ]

    operations = [
        migrations.RunPython(code=populate_fallacies, reverse_code=unpopulate_fallacies),
    ]
